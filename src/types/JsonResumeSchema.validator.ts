/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv = require("ajv");
import JsonResumeSchema from "./JsonResumeSchema";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export { JsonResumeSchema };
export const JsonResumeSchemaSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  properties: {
    awards: {
      items: {
        defaultProperties: [],
        properties: {
          awarder: {
            type: "string",
          },
          date: {
            type: "string",
          },
          summary: {
            type: "string",
          },
          title: {
            type: "string",
          },
        },
        required: ["date", "summary", "title"],
        type: "object",
      },
      type: "array",
    },
    basics: {
      defaultProperties: [],
      properties: {
        email: {
          type: "string",
        },
        image: {
          type: "string",
        },
        label: {
          type: "string",
        },
        location: {
          defaultProperties: [],
          properties: {
            address: {
              type: "string",
            },
            city: {
              type: "string",
            },
            countryCode: {
              type: "string",
            },
            postalCode: {
              type: "string",
            },
            region: {
              type: "string",
            },
          },
          type: "object",
        },
        name: {
          type: "string",
        },
        phone: {
          type: "string",
        },
        profiles: {
          items: {
            defaultProperties: [],
            properties: {
              network: {
                type: "string",
              },
              url: {
                type: "string",
              },
              username: {
                type: "string",
              },
            },
            required: ["network", "url", "username"],
            type: "object",
          },
          type: "array",
        },
        summary: {
          type: "string",
        },
        url: {
          type: "string",
        },
      },
      required: ["email", "label", "location", "name", "summary"],
      type: "object",
    },
    education: {
      items: {
        defaultProperties: [],
        properties: {
          area: {
            type: "string",
          },
          courses: {
            items: {
              type: "string",
            },
            type: "array",
          },
          endDate: {
            type: "string",
          },
          gpa: {
            type: "string",
          },
          institution: {
            type: "string",
          },
          startDate: {
            type: "string",
          },
          studyType: {
            type: "string",
          },
        },
        required: ["institution", "startDate", "studyType"],
        type: "object",
      },
      type: "array",
    },
    interests: {
      items: {
        defaultProperties: [],
        properties: {
          keywords: {
            items: {
              type: "string",
            },
            type: "array",
          },
          name: {
            type: "string",
          },
        },
        required: ["name"],
        type: "object",
      },
      type: "array",
    },
    languages: {
      items: {
        defaultProperties: [],
        properties: {
          fluency: {
            type: "string",
          },
          language: {
            type: "string",
          },
        },
        required: ["fluency", "language"],
        type: "object",
      },
      type: "array",
    },
    projects: {
      items: {
        defaultProperties: [],
        properties: {
          description: {
            type: "string",
          },
          endDate: {
            type: "string",
          },
          entity: {
            type: "string",
          },
          highlights: {
            items: {
              type: "string",
            },
            type: "array",
          },
          keywords: {
            items: {
              type: "string",
            },
            type: "array",
          },
          name: {
            type: "string",
          },
          roles: {
            items: {
              type: "string",
            },
            type: "array",
          },
          startDate: {
            type: "string",
          },
          type: {
            type: "string",
          },
          url: {
            type: "string",
          },
        },
        required: [
          "description",
          "entity",
          "highlights",
          "name",
          "roles",
          "type",
          "url",
        ],
        type: "object",
      },
      type: "array",
    },
    publications: {
      items: {
        defaultProperties: [],
        properties: {
          name: {
            type: "string",
          },
          publisher: {
            type: "string",
          },
          releaseDate: {
            type: "string",
          },
          summary: {
            type: "string",
          },
          url: {
            type: "string",
          },
        },
        required: ["name", "releaseDate", "summary", "url"],
        type: "object",
      },
      type: "array",
    },
    references: {
      items: {
        defaultProperties: [],
        properties: {
          name: {
            type: "string",
          },
          reference: {
            type: "string",
          },
        },
        required: ["name", "reference"],
        type: "object",
      },
      type: "array",
    },
    skills: {
      items: {
        defaultProperties: [],
        properties: {
          keywords: {
            items: {
              type: "string",
            },
            type: "array",
          },
          level: {
            type: "string",
          },
          name: {
            type: "string",
          },
        },
        required: ["name"],
        type: "object",
      },
      type: "array",
    },
    volunteer: {
      items: {
        defaultProperties: [],
        properties: {
          endDate: {
            type: "string",
          },
          highlights: {
            items: {
              type: "string",
            },
            type: "array",
          },
          organization: {
            type: "string",
          },
          position: {
            type: "string",
          },
          startDate: {
            type: "string",
          },
          summary: {
            type: "string",
          },
          url: {
            type: "string",
          },
        },
        required: ["organization", "startDate", "summary", "url"],
        type: "object",
      },
      type: "array",
    },
    work: {
      items: {
        defaultProperties: [],
        properties: {
          description: {
            type: "string",
          },
          endDate: {
            type: "string",
          },
          highlights: {
            items: {
              type: "string",
            },
            type: "array",
          },
          location: {
            type: "string",
          },
          name: {
            type: "string",
          },
          position: {
            type: "string",
          },
          startDate: {
            type: "string",
          },
          summary: {
            type: "string",
          },
          url: {
            type: "string",
          },
        },
        required: [
          "description",
          "location",
          "name",
          "position",
          "startDate",
          "summary",
        ],
        type: "object",
      },
      type: "array",
    },
  },
  required: ["basics", "education", "work"],
  type: "object",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isJsonResumeSchema = ajv.compile(
  JsonResumeSchemaSchema
) as ValidateFunction<JsonResumeSchema>;
export default function validate(value: unknown): JsonResumeSchema {
  if (isJsonResumeSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isJsonResumeSchema.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "JsonResumeSchema" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
