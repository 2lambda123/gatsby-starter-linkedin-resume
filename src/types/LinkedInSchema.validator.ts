/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv = require("ajv");
import LinkedInSchema from "./LinkedInSchema";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export { LinkedInSchema };
export const LinkedInSchemaSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  definitions: {
    ContactType: {
      enum: [
        "Address",
        "Birthday",
        "Email",
        "Phone",
        "Websites",
        "Your Profile",
      ],
      type: "string",
    },
    LanguageProficiency: {
      enum: [
        "Full professional proficiency",
        "Limited working proficiency",
        "Native or bilingual proficiency",
      ],
      type: "string",
    },
  },
  properties: {
    contact: {
      items: {
        defaultProperties: [],
        properties: {
          type: {
            $ref: "#/definitions/ContactType",
          },
          values: {
            items: {
              type: "string",
            },
            type: "array",
          },
        },
        required: ["type", "values"],
        type: "object",
      },
      type: "array",
    },
    courses: {
      items: {
        defaultProperties: [],
        properties: {
          name: {
            type: "string",
          },
          year: {
            type: "string",
          },
        },
        required: ["name", "year"],
        type: "object",
      },
      type: "array",
    },
    educations: {
      items: {
        defaultProperties: [],
        properties: {
          date1: {
            type: "string",
          },
          date2: {
            type: "string",
          },
          degree: {
            type: "string",
          },
          fieldofstudy: {
            type: "string",
          },
          title: {
            type: "string",
          },
        },
        required: ["date1", "date2", "degree", "fieldofstudy", "title"],
        type: "object",
      },
      type: "array",
    },
    languages: {
      items: {
        defaultProperties: [],
        properties: {
          name: {
            type: "string",
          },
          proficiency: {
            $ref: "#/definitions/LanguageProficiency",
          },
        },
        required: ["name", "proficiency"],
        type: "object",
      },
      type: "array",
    },
    positions: {
      items: {
        allOf: [
          {
            defaultProperties: [],
            properties: {
              companyName: {
                type: "string",
              },
              date1: {
                type: "string",
              },
              date2: {
                type: "string",
              },
              description: {
                type: "string",
              },
              link: {
                type: "string",
              },
              location: {
                type: "string",
              },
              title: {
                type: "string",
              },
            },
            required: ["date1", "date2", "description", "title"],
            type: "object",
          },
          {
            defaultProperties: [],
            properties: {
              roles: {
                items: {
                  defaultProperties: [],
                  properties: {
                    companyName: {
                      type: "string",
                    },
                    date1: {
                      type: "string",
                    },
                    date2: {
                      type: "string",
                    },
                    description: {
                      type: "string",
                    },
                    link: {
                      type: "string",
                    },
                    location: {
                      type: "string",
                    },
                    title: {
                      type: "string",
                    },
                  },
                  required: ["date1", "date2", "description", "title"],
                  type: "object",
                },
                type: "array",
              },
            },
            type: "object",
          },
        ],
      },
      type: "array",
    },
    profile: {
      defaultProperties: [],
      properties: {
        headline: {
          type: "string",
        },
        imageurl: {
          type: "string",
        },
        name: {
          type: "string",
        },
        summary: {
          type: "string",
        },
      },
      required: ["headline", "imageurl", "name", "summary"],
      type: "object",
    },
    projects: {
      items: {
        defaultProperties: [],
        properties: {
          date: {
            type: "string",
          },
          description: {
            type: "string",
          },
          link: {
            type: "string",
          },
          name: {
            type: "string",
          },
        },
        required: ["date", "description", "link", "name"],
        type: "object",
      },
      type: "array",
    },
    skills: {
      items: {
        defaultProperties: [],
        properties: {
          count: {
            type: "string",
          },
          title: {
            type: "string",
          },
        },
        required: ["title"],
        type: "object",
      },
      type: "array",
    },
  },
  required: [
    "contact",
    "courses",
    "educations",
    "languages",
    "positions",
    "profile",
    "projects",
    "skills",
  ],
  type: "object",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isLinkedInSchema = ajv.compile(
  LinkedInSchemaSchema
) as ValidateFunction<LinkedInSchema>;
export default function validate(value: unknown): LinkedInSchema {
  if (isLinkedInSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isLinkedInSchema.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "LinkedInSchema" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
